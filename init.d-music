#!/bin/sh
### BEGIN INIT INFO
# Provides:
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

export LOG_LEVEL=DEBUG
export WEB_ROOT=/home/alex/music-player/resources/web/ 
export MUSIC_AUTO_START=0

dir="/home/alex/music-player"
cmd="./my123 /media/nugget_share/music/alex-beet/ streams playlists /home/alex/id3_cache"
user="root"

name=`basename $0`
pid_file="/var/run/$name.pid"
stdout_log="/dev/null"
stderr_log="/dev/null"
stdout_log="/ramdisk/music.stdout"
stderr_log="/ramdisk/music.stderr"

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps -p `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting $name"
        cd "$dir"
        if mount | grep /ramdisk > /dev/null; then
            echo "ram disk already exists"
        else
            mkdir /ramdisk
            mount -t tmpfs -o size=10M tmpfs /ramdisk
        fi
        amixer cset numid=3 1
        amixer cset numid=1 0
        mount -a
        $cmd > "$stdout_log" 2> "$stderr_log" &
        echo $! > "$pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill `get_pid`
        for i in 1 2 3 4 5 6 7 8 9 10
        # for i in `seq 10`
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
